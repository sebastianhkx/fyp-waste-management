from matplotlib.colors import DivergingNorm
import streamlit as st
# To make things easier later, we're also importing numpy and pandas for
# working with sample data.

import altair as alt
from altair.expr import datum
from pandas_datareader import data
from pandas_datareader._utils import RemoteDataError
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from scipy.stats import norm
from tabulate import tabulate
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px

# %matplotlib inline

#sidebar writings and tabs
st.sidebar.title("Towards Zero Waste")
option = st.sidebar.selectbox("Service Selection", ('Waste Calculator','Past Waste Generated','Geographical Analysis'))



if option == 'Waste Calculator':
    st.title("Waste Overview and Calculations")
    st.header("Welcome to our Waste Calculator! We provide **Visualizations** and **analytical waste data** for real estate developers to easily read and draw insights!")

    #STEP 1: get info
    st.header("Enter Building Information")

    numberOfETFs = st.selectbox('What is the type of building?',('Residential','Commercial','Institution','Industrial','Others'))

    if numberOfETFs == 'Residential':
        st.selectbox('Residential Type', ('HDB Housing','Condominium', 'Private Apartment', 'Landed Property'))

    elif numberOfETFs == 'Commercial':
        st.selectbox('Commercial Type', ('Bank','Office Building', 'Shopping Complex', 'Hotel', 'Supermarket'))

    elif numberOfETFs == 'Institution':
        st.selectbox('Institution Type', ('Fire Station','Police Station', 'Dormitory', 'Prison', 'Library', 'School'))

    elif numberOfETFs == 'Industrial':
        st.selectbox('Industrial Type', ('Refineries','Fertilizer Plant', 'Warehouse', 'Power Station', 'Light Manufacturing', 'Heavy Manufacturing'))

    elif numberOfETFs == 'Others':
        st.selectbox('Purpose of Building', ('Stadium', 'Carpark'))

    capacity = st.text_input('Building Capacity (Number of People)',)

    units = st.text_input('Number of Units',)

    
    if units != '' : 

        st.header("*Waste Calculations and Visualizations*")

        fig = plt.figure(figsize =(13, 10))
        allocation = (0.2, 0.3, 0.1,0.12,0.12,0.02,0.25)
        waste_breakdown = ('metal', 'plastic', 'paper', 'Organic Waste', 'Hazardous Waste', 'Recyclable Rubbish', 'Liquid Waste')
        plt.pie(allocation, labels = waste_breakdown, autopct='%1.1f%%')
        plt.legend()
        st.pyplot(fig)


if option == 'Past Waste Generated':
    # data 
    df = pd.read_csv("./Waste_Audit_Data_v4_EDITED.csv")

    st.title("Waste Generated by Commercial Buildings")
    st.markdown('The dashboard visualises the distribution of past waste generated and its occupancy by commercial building sub-types: Retail Mixed, Retail Non-Food, Office. This data is based in America.')
    st.sidebar.title("Visualisation Selector")
    select = st.sidebar.selectbox('Visualisation type:', ['Pie Chart - Distribution', 'Bar Chart - Waste & Occupancy'], key='1')
    
    # filter
    subset_data = df
    subtype_input = st.sidebar.multiselect(
    'Filter Building Sub-type:',
    df.groupby('SubType').count().reset_index()['SubType'].tolist())
    if len(subtype_input) > 0:
        subset_data = df[df['SubType'].isin(subtype_input)]

    # pie 
    if select == 'Pie Chart - Distribution':
        st.header("Distribution of Waste Generated between Sub-types")
        fig = px.pie(subset_data, values=subset_data['TotalWaste'], names=subset_data['SubType'], title='Total Waste Generated in KG')
        st.plotly_chart(fig)

    # bar
    if select=='Bar Chart - Waste & Occupancy':
        st.header("Waste Generation & Occupancy by Sub-types")
        fig = go.Figure(data=[
        go.Bar(name='TotalWaste', x=subset_data['SubType'], y=subset_data['TotalWaste']),
        go.Bar(name='Avg_Daily_Occupants', x=subset_data['SubType'], y=subset_data['Avg_Daily_Occupants'])])
        st.plotly_chart(fig)

#type of visualisation user wants to see
if option == 'Geographical Analysis':
    st.title("Geographic Analysis of waste collection centres")
    st.header("Welcome to our Visualisations regarding geographic analysis! We provide visualisations for users to find the closest waste collection points from the comfort of their homes!")

visualisation_choice = st.selectbox('What is the type of visualisation you would like to see?',('Closest E-recycling bins','Closest 2nd hand good collection point'))

if visualisation_choice == 'Closest E-recycling bins':
    st.selectbox('Closest E-recycling bins', ('Closest 2nd hand good collection point'))
    js = "window.open('http://storage.googleapis.com/fyp-e-recycling-bins/index.html')"  # New tab or window
    html = '<img src onerror="{}">'.format(js)
    div = DivergingNorm(text=html)
    st.bokeh_chart(div)


elif visualisation_choice == 'Closest 2nd hand good collection point':
    st.selectbox('Closest 2nd hand good collection point', ('Closest E-recycling bins'))
    js = "window.open('http://storage.googleapis.com/fyp-2nd-hands-goods-collection/index.html')"  # New tab or window
    html = '<img src onerror="{}">'.format(js)
    div = DivergingNorm(text=html)
    st.bokeh_chart(div)




